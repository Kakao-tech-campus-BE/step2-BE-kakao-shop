<?xml version="1.0" encoding="UTF-8"?>
<testsuite name="com.example.kakao.user.UserRestControllerTest" tests="12" skipped="0" failures="0" errors="0" timestamp="2023-08-02T04:50:58" hostname="MacBook-Pro.local" time="0.38">
  <properties/>
  <testcase name="로그인" classname="com.example.kakao.user.UserRestControllerTest" time="0.157"/>
  <testcase name="회원가입 - 유효하지않은 이메일" classname="com.example.kakao.user.UserRestControllerTest" time="0.019"/>
  <testcase name="로그인 - 유효하지않은 비밀번호(글자수)" classname="com.example.kakao.user.UserRestControllerTest" time="0.012"/>
  <testcase name="이메일 중복확인" classname="com.example.kakao.user.UserRestControllerTest" time="0.013"/>
  <testcase name="회원가입" classname="com.example.kakao.user.UserRestControllerTest" time="0.094"/>
  <testcase name="이메일 중복확인 - 유효하지않은 이메일" classname="com.example.kakao.user.UserRestControllerTest" time="0.016"/>
  <testcase name="회원가입 - 유효하지않은 비밀번호(모든 문자종류 포함X)" classname="com.example.kakao.user.UserRestControllerTest" time="0.011"/>
  <testcase name="회원가입 - 유효하지않은 비밀번호(글자수)" classname="com.example.kakao.user.UserRestControllerTest" time="0.011"/>
  <testcase name="로그인 - 유효하지 않은 비밀번호(문자종류 포함X)" classname="com.example.kakao.user.UserRestControllerTest" time="0.01"/>
  <testcase name="이메일 중복확인 - 중복된 이메일" classname="com.example.kakao.user.UserRestControllerTest" time="0.011"/>
  <testcase name="로그인 - 유효하지 않은 이메일" classname="com.example.kakao.user.UserRestControllerTest" time="0.009"/>
  <testcase name="회원가입 - 동일한 이메일 존재" classname="com.example.kakao.user.UserRestControllerTest" time="0.01"/>
  <system-out><![CDATA[2023-08-02 13:50:58.463  INFO 48152 --- [    Test worker] .b.t.c.SpringBootTestContextBootstrapper : Neither @ContextConfiguration nor @ContextHierarchy found for test class [com.example.kakao.user.UserRestControllerTest], using SpringBootContextLoader
2023-08-02 13:50:58.463  INFO 48152 --- [    Test worker] o.s.t.c.support.AbstractContextLoader    : Could not detect default resource locations for test class [com.example.kakao.user.UserRestControllerTest]: no resource found for suffixes {-context.xml, Context.groovy}.
2023-08-02 13:50:58.463  INFO 48152 --- [    Test worker] t.c.s.AnnotationConfigContextLoaderUtils : Could not detect default configuration classes for test class [com.example.kakao.user.UserRestControllerTest]: UserRestControllerTest does not declare any static, non-private, non-final, nested classes annotated with @Configuration.
2023-08-02 13:50:58.466  INFO 48152 --- [    Test worker] .b.t.c.SpringBootTestContextBootstrapper : Found @SpringBootConfiguration com.example.kakao.KakaoApplication for test class com.example.kakao.user.UserRestControllerTest
2023-08-02 13:50:58.466  INFO 48152 --- [    Test worker] .b.t.c.SpringBootTestContextBootstrapper : Loaded default TestExecutionListener class names from location [META-INF/spring.factories]: [org.springframework.security.test.context.support.WithSecurityContextTestExecutionListener, org.springframework.security.test.context.support.ReactorContextTestExecutionListener, org.springframework.boot.test.autoconfigure.restdocs.RestDocsTestExecutionListener, org.springframework.boot.test.autoconfigure.web.client.MockRestServiceServerResetTestExecutionListener, org.springframework.boot.test.autoconfigure.web.servlet.MockMvcPrintOnlyOnFailureTestExecutionListener, org.springframework.boot.test.autoconfigure.web.servlet.WebDriverTestExecutionListener, org.springframework.boot.test.autoconfigure.webservices.client.MockWebServiceServerTestExecutionListener, org.springframework.boot.test.mock.mockito.MockitoTestExecutionListener, org.springframework.boot.test.mock.mockito.ResetMocksTestExecutionListener, org.springframework.test.context.web.ServletTestExecutionListener, org.springframework.test.context.support.DirtiesContextBeforeModesTestExecutionListener, org.springframework.test.context.event.ApplicationEventsTestExecutionListener, org.springframework.test.context.support.DependencyInjectionTestExecutionListener, org.springframework.test.context.support.DirtiesContextTestExecutionListener, org.springframework.test.context.transaction.TransactionalTestExecutionListener, org.springframework.test.context.jdbc.SqlScriptsTestExecutionListener, org.springframework.test.context.event.EventPublishingTestExecutionListener]
2023-08-02 13:50:58.467  INFO 48152 --- [    Test worker] .b.t.c.SpringBootTestContextBootstrapper : Using TestExecutionListeners: [org.springframework.test.context.web.ServletTestExecutionListener@344db28d, org.springframework.test.context.support.DirtiesContextBeforeModesTestExecutionListener@4420f4d4, org.springframework.test.context.event.ApplicationEventsTestExecutionListener@126320a8, org.springframework.boot.test.mock.mockito.MockitoTestExecutionListener@4bb05e2a, org.springframework.boot.test.autoconfigure.SpringBootDependencyInjectionTestExecutionListener@12b0440b, org.springframework.test.context.support.DirtiesContextTestExecutionListener@517594dd, org.springframework.test.context.transaction.TransactionalTestExecutionListener@5a98983b, org.springframework.test.context.jdbc.SqlScriptsTestExecutionListener@1390cc4c, org.springframework.security.test.context.support.WithSecurityContextTestExecutionListener@3905229, org.springframework.test.context.event.EventPublishingTestExecutionListener@7ebefdfa, org.springframework.security.test.context.support.ReactorContextTestExecutionListener@60f9fb56, org.springframework.boot.test.autoconfigure.restdocs.RestDocsTestExecutionListener@751eb9a9, org.springframework.boot.test.autoconfigure.web.client.MockRestServiceServerResetTestExecutionListener@749ebc39, org.springframework.boot.test.autoconfigure.web.servlet.MockMvcPrintOnlyOnFailureTestExecutionListener@7dc6ce7d, org.springframework.boot.test.autoconfigure.web.servlet.WebDriverTestExecutionListener@52caa9d8, org.springframework.boot.test.autoconfigure.webservices.client.MockWebServiceServerTestExecutionListener@521981d9, org.springframework.boot.test.mock.mockito.ResetMocksTestExecutionListener@53e780d7]
2023-08-02 13:50:58.472  INFO 48152 --- [    Test worker] o.s.b.t.m.w.SpringBootMockServletContext : Initializing Spring TestDispatcherServlet ''
2023-08-02 13:50:58.472  INFO 48152 --- [    Test worker] o.s.t.web.servlet.TestDispatcherServlet  : Initializing Servlet ''
2023-08-02 13:50:58.473  INFO 48152 --- [    Test worker] o.s.t.web.servlet.TestDispatcherServlet  : Completed initialization in 1 ms
요청 데이터 : {"email":"user1@nate.com","password":"user1234!"}
Hibernate: 
    select
        user0_.id as id1_6_,
        user0_.email as email2_6_,
        user0_.password as password3_6_,
        user0_.roles as roles4_6_,
        user0_.username as username5_6_ 
    from
        user_tb user0_ 
    where
        user0_.email=?
2023-08-02 13:50:58.514 TRACE 48152 --- [    Test worker] o.h.type.descriptor.sql.BasicBinder      : binding parameter [1] as [VARCHAR] - [user1@nate.com]
2023-08-02 13:50:58.514 TRACE 48152 --- [    Test worker] o.h.type.descriptor.sql.BasicExtractor   : extracted value ([id1_6_] : [INTEGER]) - [2]
2023-08-02 13:50:58.514 TRACE 48152 --- [    Test worker] o.h.type.descriptor.sql.BasicExtractor   : extracted value ([email2_6_] : [VARCHAR]) - [user1@nate.com]
2023-08-02 13:50:58.514 TRACE 48152 --- [    Test worker] o.h.type.descriptor.sql.BasicExtractor   : extracted value ([password3_6_] : [VARCHAR]) - [{bcrypt}$2a$10$nfm1CxFC6mYT2zivOTJUNedyfMRFImsQKmqw2Tl6llK4mTAl0wq8y]
2023-08-02 13:50:58.514 TRACE 48152 --- [    Test worker] o.h.type.descriptor.sql.BasicExtractor   : extracted value ([roles4_6_] : [VARCHAR]) - [ROLE_USER]
2023-08-02 13:50:58.514 TRACE 48152 --- [    Test worker] o.h.type.descriptor.sql.BasicExtractor   : extracted value ([username5_6_] : [VARCHAR]) - [user1mango]
테스트 : {"success":true,"response":null,"error":null}

MockHttpServletRequest:
      HTTP Method = POST
      Request URI = /login
       Parameters = {}
          Headers = [Content-Type:"application/json;charset=UTF-8", Content-Length:"49"]
             Body = {"email":"user1@nate.com","password":"user1234!"}
    Session Attrs = {}

Handler:
             Type = com.example.kakao.user.UserRestController
           Method = com.example.kakao.user.UserRestController#login(LoginDTO, Errors)

Async:
    Async started = false
     Async result = null

Resolved Exception:
             Type = null

ModelAndView:
        View name = null
             View = null
            Model = null

FlashMap:
       Attributes = null

MockHttpServletResponse:
           Status = 200
    Error message = null
          Headers = [Authorization:"Bearer eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzUxMiJ9.eyJzdWIiOiJ1c2VyMUBuYXRlLmNvbSIsInJvbGUiOiJST0xFX1VTRVIiLCJpZCI6MiwiZXhwIjoxNjkxMTI0NjU4fQ.ZDaHhvi8L4s7FG00AP8SmS2s2u3q7uKTAbMM6UoC38ulFfWYTOA0xj14XIJrwtLljd-t6Awg3qhPDzPzEOAhhA", Content-Type:"application/json;charset=UTF-8"]
     Content type = application/json;charset=UTF-8
             Body = {"success":true,"response":null,"error":null}
    Forwarded URL = null
   Redirected URL = null
          Cookies = []
2023-08-02 13:50:58.629  INFO 48152 --- [    Test worker] o.s.b.t.m.w.SpringBootMockServletContext : Initializing Spring TestDispatcherServlet ''
2023-08-02 13:50:58.629  INFO 48152 --- [    Test worker] o.s.t.web.servlet.TestDispatcherServlet  : Initializing Servlet ''
2023-08-02 13:50:58.630  INFO 48152 --- [    Test worker] o.s.t.web.servlet.TestDispatcherServlet  : Completed initialization in 1 ms
요청 데이터 : {"email":"newusernate.com","password":"user1234!","username":"newusermango"}
테스트 : {"success":false,"response":null,"error":{"message":"이메일 형식으로 작성해주세요:email","status":400}}

MockHttpServletRequest:
      HTTP Method = POST
      Request URI = /join
       Parameters = {}
          Headers = [Content-Type:"application/json;charset=UTF-8", Content-Length:"76"]
             Body = {"email":"newusernate.com","password":"user1234!","username":"newusermango"}
    Session Attrs = {}

Handler:
             Type = com.example.kakao.user.UserRestController
           Method = com.example.kakao.user.UserRestController#join(JoinDTO, Errors)

Async:
    Async started = false
     Async result = null

Resolved Exception:
             Type = com.example.kakao._core.errors.exception.Exception400

ModelAndView:
        View name = null
             View = null
            Model = null

FlashMap:
       Attributes = null

MockHttpServletResponse:
           Status = 400
    Error message = null
          Headers = [Content-Type:"application/json;charset=UTF-8"]
     Content type = application/json;charset=UTF-8
             Body = {"success":false,"response":null,"error":{"message":"이메일 형식으로 작성해주세요:email","status":400}}
    Forwarded URL = null
   Redirected URL = null
          Cookies = []
2023-08-02 13:50:58.649  INFO 48152 --- [    Test worker] o.s.b.t.m.w.SpringBootMockServletContext : Initializing Spring TestDispatcherServlet ''
2023-08-02 13:50:58.649  INFO 48152 --- [    Test worker] o.s.t.web.servlet.TestDispatcherServlet  : Initializing Servlet ''
2023-08-02 13:50:58.650  INFO 48152 --- [    Test worker] o.s.t.web.servlet.TestDispatcherServlet  : Completed initialization in 1 ms
요청 데이터 : {"email":"user1@nate.com","password":"user12!"}
테스트 : {"success":false,"response":null,"error":{"message":"8에서 20자 이내여야 합니다.:password","status":400}}

MockHttpServletRequest:
      HTTP Method = POST
      Request URI = /login
       Parameters = {}
          Headers = [Content-Type:"application/json;charset=UTF-8", Content-Length:"47"]
             Body = {"email":"user1@nate.com","password":"user12!"}
    Session Attrs = {}

Handler:
             Type = com.example.kakao.user.UserRestController
           Method = com.example.kakao.user.UserRestController#login(LoginDTO, Errors)

Async:
    Async started = false
     Async result = null

Resolved Exception:
             Type = com.example.kakao._core.errors.exception.Exception400

ModelAndView:
        View name = null
             View = null
            Model = null

FlashMap:
       Attributes = null

MockHttpServletResponse:
           Status = 400
    Error message = null
          Headers = [Content-Type:"application/json;charset=UTF-8"]
     Content type = application/json;charset=UTF-8
             Body = {"success":false,"response":null,"error":{"message":"8에서 20자 이내여야 합니다.:password","status":400}}
    Forwarded URL = null
   Redirected URL = null
          Cookies = []
2023-08-02 13:50:58.662  INFO 48152 --- [    Test worker] o.s.b.t.m.w.SpringBootMockServletContext : Initializing Spring TestDispatcherServlet ''
2023-08-02 13:50:58.662  INFO 48152 --- [    Test worker] o.s.t.web.servlet.TestDispatcherServlet  : Initializing Servlet ''
2023-08-02 13:50:58.662  INFO 48152 --- [    Test worker] o.s.t.web.servlet.TestDispatcherServlet  : Completed initialization in 0 ms
요청 데이터 : {"email":"newuser@nate.com"}
Hibernate: 
    select
        user0_.id as id1_6_,
        user0_.email as email2_6_,
        user0_.password as password3_6_,
        user0_.roles as roles4_6_,
        user0_.username as username5_6_ 
    from
        user_tb user0_ 
    where
        user0_.email=?
2023-08-02 13:50:58.665 TRACE 48152 --- [    Test worker] o.h.type.descriptor.sql.BasicBinder      : binding parameter [1] as [VARCHAR] - [newuser@nate.com]
테스트 : {"success":true,"response":null,"error":null}

MockHttpServletRequest:
      HTTP Method = POST
      Request URI = /check
       Parameters = {}
          Headers = [Content-Type:"application/json;charset=UTF-8", Content-Length:"28"]
             Body = {"email":"newuser@nate.com"}
    Session Attrs = {}

Handler:
             Type = com.example.kakao.user.UserRestController
           Method = com.example.kakao.user.UserRestController#check(EmailCheckDTO, Errors)

Async:
    Async started = false
     Async result = null

Resolved Exception:
             Type = null

ModelAndView:
        View name = null
             View = null
            Model = null

FlashMap:
       Attributes = null

MockHttpServletResponse:
           Status = 200
    Error message = null
          Headers = [Content-Type:"application/json;charset=UTF-8"]
     Content type = application/json;charset=UTF-8
             Body = {"success":true,"response":null,"error":null}
    Forwarded URL = null
   Redirected URL = null
          Cookies = []
2023-08-02 13:50:58.676  INFO 48152 --- [    Test worker] o.s.b.t.m.w.SpringBootMockServletContext : Initializing Spring TestDispatcherServlet ''
2023-08-02 13:50:58.676  INFO 48152 --- [    Test worker] o.s.t.web.servlet.TestDispatcherServlet  : Initializing Servlet ''
2023-08-02 13:50:58.676  INFO 48152 --- [    Test worker] o.s.t.web.servlet.TestDispatcherServlet  : Completed initialization in 0 ms
요청 데이터 : {"email":"newuser@nate.com","password":"user1234!","username":"newusermango"}
Hibernate: 
    select
        user0_.id as id1_6_,
        user0_.email as email2_6_,
        user0_.password as password3_6_,
        user0_.roles as roles4_6_,
        user0_.username as username5_6_ 
    from
        user_tb user0_ 
    where
        user0_.email=?
2023-08-02 13:50:58.678 TRACE 48152 --- [    Test worker] o.h.type.descriptor.sql.BasicBinder      : binding parameter [1] as [VARCHAR] - [newuser@nate.com]
Hibernate: 
    insert 
    into
        user_tb
        (id, email, password, roles, username) 
    values
        (default, ?, ?, ?, ?)
2023-08-02 13:50:58.758 TRACE 48152 --- [    Test worker] o.h.type.descriptor.sql.BasicBinder      : binding parameter [1] as [VARCHAR] - [newuser@nate.com]
2023-08-02 13:50:58.758 TRACE 48152 --- [    Test worker] o.h.type.descriptor.sql.BasicBinder      : binding parameter [2] as [VARCHAR] - [{bcrypt}$2a$10$6QlV/xvW22mPUQpRkABFseR.TCz5ojB6bZDbGrfMZzpTRV2X.rrm.]
2023-08-02 13:50:58.758 TRACE 48152 --- [    Test worker] o.h.type.descriptor.sql.BasicBinder      : binding parameter [3] as [VARCHAR] - [ROLE_USER]
2023-08-02 13:50:58.758 TRACE 48152 --- [    Test worker] o.h.type.descriptor.sql.BasicBinder      : binding parameter [4] as [VARCHAR] - [newusermango]
테스트 : {"success":true,"response":null,"error":null}

MockHttpServletRequest:
      HTTP Method = POST
      Request URI = /join
       Parameters = {}
          Headers = [Content-Type:"application/json;charset=UTF-8", Content-Length:"77"]
             Body = {"email":"newuser@nate.com","password":"user1234!","username":"newusermango"}
    Session Attrs = {}

Handler:
             Type = com.example.kakao.user.UserRestController
           Method = com.example.kakao.user.UserRestController#join(JoinDTO, Errors)

Async:
    Async started = false
     Async result = null

Resolved Exception:
             Type = null

ModelAndView:
        View name = null
             View = null
            Model = null

FlashMap:
       Attributes = null

MockHttpServletResponse:
           Status = 200
    Error message = null
          Headers = [Content-Type:"application/json;charset=UTF-8"]
     Content type = application/json;charset=UTF-8
             Body = {"success":true,"response":null,"error":null}
    Forwarded URL = null
   Redirected URL = null
          Cookies = []
2023-08-02 13:50:58.774  INFO 48152 --- [    Test worker] o.s.b.t.m.w.SpringBootMockServletContext : Initializing Spring TestDispatcherServlet ''
2023-08-02 13:50:58.774  INFO 48152 --- [    Test worker] o.s.t.web.servlet.TestDispatcherServlet  : Initializing Servlet ''
2023-08-02 13:50:58.775  INFO 48152 --- [    Test worker] o.s.t.web.servlet.TestDispatcherServlet  : Completed initialization in 1 ms
요청 데이터 : {"email":"newusernate.com"}
테스트 : {"success":false,"response":null,"error":{"message":"이메일 형식으로 작성해주세요:email","status":400}}

MockHttpServletRequest:
      HTTP Method = POST
      Request URI = /check
       Parameters = {}
          Headers = [Content-Type:"application/json;charset=UTF-8", Content-Length:"27"]
             Body = {"email":"newusernate.com"}
    Session Attrs = {}

Handler:
             Type = com.example.kakao.user.UserRestController
           Method = com.example.kakao.user.UserRestController#check(EmailCheckDTO, Errors)

Async:
    Async started = false
     Async result = null

Resolved Exception:
             Type = com.example.kakao._core.errors.exception.Exception400

ModelAndView:
        View name = null
             View = null
            Model = null

FlashMap:
       Attributes = null

MockHttpServletResponse:
           Status = 400
    Error message = null
          Headers = [Content-Type:"application/json;charset=UTF-8"]
     Content type = application/json;charset=UTF-8
             Body = {"success":false,"response":null,"error":{"message":"이메일 형식으로 작성해주세요:email","status":400}}
    Forwarded URL = null
   Redirected URL = null
          Cookies = []
2023-08-02 13:50:58.786  INFO 48152 --- [    Test worker] o.s.b.t.m.w.SpringBootMockServletContext : Initializing Spring TestDispatcherServlet ''
2023-08-02 13:50:58.786  INFO 48152 --- [    Test worker] o.s.t.web.servlet.TestDispatcherServlet  : Initializing Servlet ''
2023-08-02 13:50:58.786  INFO 48152 --- [    Test worker] o.s.t.web.servlet.TestDispatcherServlet  : Completed initialization in 0 ms
요청 데이터 : {"email":"newuser@nate.com","password":"user1234","username":"newusermango"}
테스트 : {"success":false,"response":null,"error":{"message":"영문, 숫자, 특수문자가 포함되어야하고 공백이 포함될 수 없습니다.:password","status":400}}

MockHttpServletRequest:
      HTTP Method = POST
      Request URI = /join
       Parameters = {}
          Headers = [Content-Type:"application/json;charset=UTF-8", Content-Length:"76"]
             Body = {"email":"newuser@nate.com","password":"user1234","username":"newusermango"}
    Session Attrs = {}

Handler:
             Type = com.example.kakao.user.UserRestController
           Method = com.example.kakao.user.UserRestController#join(JoinDTO, Errors)

Async:
    Async started = false
     Async result = null

Resolved Exception:
             Type = com.example.kakao._core.errors.exception.Exception400

ModelAndView:
        View name = null
             View = null
            Model = null

FlashMap:
       Attributes = null

MockHttpServletResponse:
           Status = 400
    Error message = null
          Headers = [Content-Type:"application/json;charset=UTF-8"]
     Content type = application/json;charset=UTF-8
             Body = {"success":false,"response":null,"error":{"message":"영문, 숫자, 특수문자가 포함되어야하고 공백이 포함될 수 없습니다.:password","status":400}}
    Forwarded URL = null
   Redirected URL = null
          Cookies = []
2023-08-02 13:50:58.797  INFO 48152 --- [    Test worker] o.s.b.t.m.w.SpringBootMockServletContext : Initializing Spring TestDispatcherServlet ''
2023-08-02 13:50:58.797  INFO 48152 --- [    Test worker] o.s.t.web.servlet.TestDispatcherServlet  : Initializing Servlet ''
2023-08-02 13:50:58.797  INFO 48152 --- [    Test worker] o.s.t.web.servlet.TestDispatcherServlet  : Completed initialization in 0 ms
요청 데이터 : {"email":"newuser@nate.com","password":"user12!","username":"newusermango"}
테스트 : {"success":false,"response":null,"error":{"message":"8에서 20자 이내여야 합니다.:password","status":400}}

MockHttpServletRequest:
      HTTP Method = POST
      Request URI = /join
       Parameters = {}
          Headers = [Content-Type:"application/json;charset=UTF-8", Content-Length:"75"]
             Body = {"email":"newuser@nate.com","password":"user12!","username":"newusermango"}
    Session Attrs = {}

Handler:
             Type = com.example.kakao.user.UserRestController
           Method = com.example.kakao.user.UserRestController#join(JoinDTO, Errors)

Async:
    Async started = false
     Async result = null

Resolved Exception:
             Type = com.example.kakao._core.errors.exception.Exception400

ModelAndView:
        View name = null
             View = null
            Model = null

FlashMap:
       Attributes = null

MockHttpServletResponse:
           Status = 400
    Error message = null
          Headers = [Content-Type:"application/json;charset=UTF-8"]
     Content type = application/json;charset=UTF-8
             Body = {"success":false,"response":null,"error":{"message":"8에서 20자 이내여야 합니다.:password","status":400}}
    Forwarded URL = null
   Redirected URL = null
          Cookies = []
2023-08-02 13:50:58.809  INFO 48152 --- [    Test worker] o.s.b.t.m.w.SpringBootMockServletContext : Initializing Spring TestDispatcherServlet ''
2023-08-02 13:50:58.809  INFO 48152 --- [    Test worker] o.s.t.web.servlet.TestDispatcherServlet  : Initializing Servlet ''
2023-08-02 13:50:58.809  INFO 48152 --- [    Test worker] o.s.t.web.servlet.TestDispatcherServlet  : Completed initialization in 0 ms
요청 데이터 : {"email":"user1@nate.com","password":"user1234"}
테스트 : {"success":false,"response":null,"error":{"message":"영문, 숫자, 특수문자가 포함되어야하고 공백이 포함될 수 없습니다.:password","status":400}}

MockHttpServletRequest:
      HTTP Method = POST
      Request URI = /login
       Parameters = {}
          Headers = [Content-Type:"application/json;charset=UTF-8", Content-Length:"48"]
             Body = {"email":"user1@nate.com","password":"user1234"}
    Session Attrs = {}

Handler:
             Type = com.example.kakao.user.UserRestController
           Method = com.example.kakao.user.UserRestController#login(LoginDTO, Errors)

Async:
    Async started = false
     Async result = null

Resolved Exception:
             Type = com.example.kakao._core.errors.exception.Exception400

ModelAndView:
        View name = null
             View = null
            Model = null

FlashMap:
       Attributes = null

MockHttpServletResponse:
           Status = 400
    Error message = null
          Headers = [Content-Type:"application/json;charset=UTF-8"]
     Content type = application/json;charset=UTF-8
             Body = {"success":false,"response":null,"error":{"message":"영문, 숫자, 특수문자가 포함되어야하고 공백이 포함될 수 없습니다.:password","status":400}}
    Forwarded URL = null
   Redirected URL = null
          Cookies = []
2023-08-02 13:50:58.819  INFO 48152 --- [    Test worker] o.s.b.t.m.w.SpringBootMockServletContext : Initializing Spring TestDispatcherServlet ''
2023-08-02 13:50:58.819  INFO 48152 --- [    Test worker] o.s.t.web.servlet.TestDispatcherServlet  : Initializing Servlet ''
2023-08-02 13:50:58.819  INFO 48152 --- [    Test worker] o.s.t.web.servlet.TestDispatcherServlet  : Completed initialization in 0 ms
요청 데이터 : {"email":"user1@nate.com"}
Hibernate: 
    select
        user0_.id as id1_6_,
        user0_.email as email2_6_,
        user0_.password as password3_6_,
        user0_.roles as roles4_6_,
        user0_.username as username5_6_ 
    from
        user_tb user0_ 
    where
        user0_.email=?
2023-08-02 13:50:58.821 TRACE 48152 --- [    Test worker] o.h.type.descriptor.sql.BasicBinder      : binding parameter [1] as [VARCHAR] - [user1@nate.com]
2023-08-02 13:50:58.821 TRACE 48152 --- [    Test worker] o.h.type.descriptor.sql.BasicExtractor   : extracted value ([id1_6_] : [INTEGER]) - [2]
2023-08-02 13:50:58.821 TRACE 48152 --- [    Test worker] o.h.type.descriptor.sql.BasicExtractor   : extracted value ([email2_6_] : [VARCHAR]) - [user1@nate.com]
2023-08-02 13:50:58.821 TRACE 48152 --- [    Test worker] o.h.type.descriptor.sql.BasicExtractor   : extracted value ([password3_6_] : [VARCHAR]) - [{bcrypt}$2a$10$nfm1CxFC6mYT2zivOTJUNedyfMRFImsQKmqw2Tl6llK4mTAl0wq8y]
2023-08-02 13:50:58.821 TRACE 48152 --- [    Test worker] o.h.type.descriptor.sql.BasicExtractor   : extracted value ([roles4_6_] : [VARCHAR]) - [ROLE_USER]
2023-08-02 13:50:58.821 TRACE 48152 --- [    Test worker] o.h.type.descriptor.sql.BasicExtractor   : extracted value ([username5_6_] : [VARCHAR]) - [user1mango]
테스트 : {"success":false,"response":null,"error":{"message":"동일한 이메일이 존재합니다 : user1@nate.com","status":400}}

MockHttpServletRequest:
      HTTP Method = POST
      Request URI = /check
       Parameters = {}
          Headers = [Content-Type:"application/json;charset=UTF-8", Content-Length:"26"]
             Body = {"email":"user1@nate.com"}
    Session Attrs = {}

Handler:
             Type = com.example.kakao.user.UserRestController
           Method = com.example.kakao.user.UserRestController#check(EmailCheckDTO, Errors)

Async:
    Async started = false
     Async result = null

Resolved Exception:
             Type = com.example.kakao._core.errors.exception.Exception400

ModelAndView:
        View name = null
             View = null
            Model = null

FlashMap:
       Attributes = null

MockHttpServletResponse:
           Status = 400
    Error message = null
          Headers = [Content-Type:"application/json;charset=UTF-8"]
     Content type = application/json;charset=UTF-8
             Body = {"success":false,"response":null,"error":{"message":"동일한 이메일이 존재합니다 : user1@nate.com","status":400}}
    Forwarded URL = null
   Redirected URL = null
          Cookies = []
2023-08-02 13:50:58.830  INFO 48152 --- [    Test worker] o.s.b.t.m.w.SpringBootMockServletContext : Initializing Spring TestDispatcherServlet ''
2023-08-02 13:50:58.830  INFO 48152 --- [    Test worker] o.s.t.web.servlet.TestDispatcherServlet  : Initializing Servlet ''
2023-08-02 13:50:58.831  INFO 48152 --- [    Test worker] o.s.t.web.servlet.TestDispatcherServlet  : Completed initialization in 1 ms
요청 데이터 : {"email":"user1nate.com","password":"user1234!"}
테스트 : {"success":false,"response":null,"error":{"message":"이메일 형식으로 작성해주세요:email","status":400}}

MockHttpServletRequest:
      HTTP Method = POST
      Request URI = /login
       Parameters = {}
          Headers = [Content-Type:"application/json;charset=UTF-8", Content-Length:"48"]
             Body = {"email":"user1nate.com","password":"user1234!"}
    Session Attrs = {}

Handler:
             Type = com.example.kakao.user.UserRestController
           Method = com.example.kakao.user.UserRestController#login(LoginDTO, Errors)

Async:
    Async started = false
     Async result = null

Resolved Exception:
             Type = com.example.kakao._core.errors.exception.Exception400

ModelAndView:
        View name = null
             View = null
            Model = null

FlashMap:
       Attributes = null

MockHttpServletResponse:
           Status = 400
    Error message = null
          Headers = [Content-Type:"application/json;charset=UTF-8"]
     Content type = application/json;charset=UTF-8
             Body = {"success":false,"response":null,"error":{"message":"이메일 형식으로 작성해주세요:email","status":400}}
    Forwarded URL = null
   Redirected URL = null
          Cookies = []
2023-08-02 13:50:58.840  INFO 48152 --- [    Test worker] o.s.b.t.m.w.SpringBootMockServletContext : Initializing Spring TestDispatcherServlet ''
2023-08-02 13:50:58.840  INFO 48152 --- [    Test worker] o.s.t.web.servlet.TestDispatcherServlet  : Initializing Servlet ''
2023-08-02 13:50:58.840  INFO 48152 --- [    Test worker] o.s.t.web.servlet.TestDispatcherServlet  : Completed initialization in 0 ms
요청 데이터 : {"email":"user1@nate.com","password":"user1234!","username":"newusermango"}
Hibernate: 
    select
        user0_.id as id1_6_,
        user0_.email as email2_6_,
        user0_.password as password3_6_,
        user0_.roles as roles4_6_,
        user0_.username as username5_6_ 
    from
        user_tb user0_ 
    where
        user0_.email=?
2023-08-02 13:50:58.842 TRACE 48152 --- [    Test worker] o.h.type.descriptor.sql.BasicBinder      : binding parameter [1] as [VARCHAR] - [user1@nate.com]
2023-08-02 13:50:58.842 TRACE 48152 --- [    Test worker] o.h.type.descriptor.sql.BasicExtractor   : extracted value ([id1_6_] : [INTEGER]) - [2]
2023-08-02 13:50:58.842 TRACE 48152 --- [    Test worker] o.h.type.descriptor.sql.BasicExtractor   : extracted value ([email2_6_] : [VARCHAR]) - [user1@nate.com]
2023-08-02 13:50:58.842 TRACE 48152 --- [    Test worker] o.h.type.descriptor.sql.BasicExtractor   : extracted value ([password3_6_] : [VARCHAR]) - [{bcrypt}$2a$10$nfm1CxFC6mYT2zivOTJUNedyfMRFImsQKmqw2Tl6llK4mTAl0wq8y]
2023-08-02 13:50:58.842 TRACE 48152 --- [    Test worker] o.h.type.descriptor.sql.BasicExtractor   : extracted value ([roles4_6_] : [VARCHAR]) - [ROLE_USER]
2023-08-02 13:50:58.842 TRACE 48152 --- [    Test worker] o.h.type.descriptor.sql.BasicExtractor   : extracted value ([username5_6_] : [VARCHAR]) - [user1mango]
테스트 : {"success":false,"response":null,"error":{"message":"동일한 이메일이 존재합니다 : user1@nate.com","status":400}}

MockHttpServletRequest:
      HTTP Method = POST
      Request URI = /join
       Parameters = {}
          Headers = [Content-Type:"application/json;charset=UTF-8", Content-Length:"75"]
             Body = {"email":"user1@nate.com","password":"user1234!","username":"newusermango"}
    Session Attrs = {}

Handler:
             Type = com.example.kakao.user.UserRestController
           Method = com.example.kakao.user.UserRestController#join(JoinDTO, Errors)

Async:
    Async started = false
     Async result = null

Resolved Exception:
             Type = com.example.kakao._core.errors.exception.Exception400

ModelAndView:
        View name = null
             View = null
            Model = null

FlashMap:
       Attributes = null

MockHttpServletResponse:
           Status = 400
    Error message = null
          Headers = [Content-Type:"application/json;charset=UTF-8"]
     Content type = application/json;charset=UTF-8
             Body = {"success":false,"response":null,"error":{"message":"동일한 이메일이 존재합니다 : user1@nate.com","status":400}}
    Forwarded URL = null
   Redirected URL = null
          Cookies = []
]]></system-out>
  <system-err><![CDATA[]]></system-err>
</testsuite>
